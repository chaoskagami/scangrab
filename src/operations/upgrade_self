#!/bin/bash

# Copyright (C) 2015  Jon Feldman/@chaoskagami
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#

upgrade_self() {
	if [ "$type" = "repo" ]; then
		echo "[Upgrade] Attempting to forward repository..."
		cd $BASEDIR
		git pull

		# Reinstall executable.
		echo "[Upgrade] Replacing '$0'"
		cp "src/scangrab" "$0"
		sed -i "s|#@OVERRIDE_BASEDIR@|BASEDIR=$(pwd)|g" "$0"
		exit 0
	fi
	URL="https://raw.githubusercontent.com/chaoskagami/scangrab/$branch/dist/scangrab.$type"
	LOG="https://raw.githubusercontent.com/chaoskagami/scangrab/$branch/CHANGES-SNAP"

	echo "[Upgrade] Checking this scangrab's sha256sum..."

	fetch_no_ops "${URL}.sha256sum" "${0}.new.sha256sum"
	if [ ! $FETCH_RESULT = 0 ]; then
		echo "[Upgrade] Error fetching sha256. Either you don't have +w permission,"
		echo "[Upgrade] or your internet is down. Either way, aborting."
		exit 1
	fi

	this_sha256="$( cat "${0}" | sha256sum )"
	gith_sha256="$( cat "${0}.new.sha256sum" )"

	rm "${0}.new.sha256sum"

	if [ "$this_sha256" = "$gith_sha256" ]; then
		echo "[Upgrade] Not required. Same sha256 as upstream."
		exit 0
	else
		echo "[Upgrade] Doesn't match upstream. Fetching..."
		fetch_no_ops "$URL" "${0}.new"
		if [ ! $FETCH_RESULT = 0 ]; then
			echo "[Upgrade] Fetch failed. Error code: $R. Do you have write permission?"
			rm "${0}.new" "${0}.new.sha256sum" 2>/dev/null
			exit $R
		fi
		echo "[Upgrade] Downloaded replacement. Checking replacement's sha256sum..."
		new_sha256="$( cat "${0}.new" | sha256sum )"
		if [ "$new_sha256" = "$gith_sha256" ]; then
			echo "[Upgrade] Matched. Replacing self..."
			cp -f "${0}.new" "${0}"
			R=$?
			if [ ! $R = 0 ]; then
				echo "[Upgrade] Couldn't replace. cp error: $R. Abort."
				rm "${0}.new" "${0}.new.sha256sum" 2>/dev/null
				exit $R
			fi
			echo "[Upgrade] Sync to avoid race conditions..."
			sync
			echo "[Upgrade] Checking to make sure it has been replaced..."
			rm "${0}.new" "${0}.new.sha256" 2>/dev/null
			new_sha256="$(cat "${0}" | sha256sum )"
			if [ ! "$new_sha256" = "$gith_sha256" ]; then
				echo "[Upgrade] Sanity check failed. This is not normal."
				exit 1
			fi
			echo "[Upgrade] Succeeded. Displaying changelog, then exiting..."
			echo "--- Changelog ----------------------"
			fetch_no_ops "$LOG" "/tmp/scangrab-changelog-$(echo ${new_sha256} | sed 's/ .*//g')"
			if [ ! $FETCH_RESULT = 0 ]; then
				echo "[Upgrade] Failed to fetch changelog."
				exit 0
			fi
			cat "/tmp/scangrab-changelog-$(echo ${new_sha256} | sed 's/ .*//g')" | sed -n '/== START ==/,/== END ==/p' | head -n-1 | tail -n+2
			rm "/tmp/scangrab-changelog-$(echo ${new_sha256} | sed 's/ .*//g')" 2>/dev/null
			exit 0
		else
			echo "[Upgrade] Failed. sha256 does not match."
		fi
	fi
	exit 1
}
