#!/bin/bash
# Copyright (C) 2015  Jon Feldman/@chaoskagami
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

mkdir -p ./dist
TARGET="./dist/scangrab"

# Shebang.
echo "#!/bin/bash" > $TARGET.tmp

# Regenerate revision file.
git show | head -n1 | sed -e 's|commit |rev=|' > rev
git branch | grep '*' | sed -e 's|* |branch=|g' >> rev
echo "#############################################" >> $TARGET.tmp
echo "#####@ORIGINAL-FILE 'rev'" >> $TARGET.tmp
cat rev >> $TARGET.tmp

echo "#############################################" >> $TARGET.tmp
echo "#####@ORIGINAL-FILE 'xul_dat'" >> $TARGET.tmp
cat xul_dat >> $TARGET.tmp

# Functions.
LIST=($(find functions/ -type f))
for module in ${LIST[@]}; do
	echo "#############################################" >> $TARGET.tmp
	echo "#####@ORIGINAL-FILE '$module'" >> $TARGET.tmp
	cat $module >> $TARGET.tmp
done

# Operations.
LIST=($(find operations/ -type f))
for module in ${LIST[@]}; do
	echo "#############################################" >> $TARGET.tmp
	echo "#####@ORIGINAL-FILE '$module'" >> $TARGET.tmp
	cat $module >> $TARGET.tmp
done

# List of the modules.
MODS=($(find modules/ -maxdepth 1 -type f | sed 's|modules/||g'))
echo "#############################################" >> $TARGET.tmp
echo "#####@AUTOGENERATED 'MODS'" >> $TARGET.tmp
echo "MODS=(${MODS[@]})" >> $TARGET.tmp
echo "#############################################" >> $TARGET.tmp


# Module content.
LIST=($(find modules/ -type f))

for module in ${LIST[@]}; do
	echo "#############################################" >> $TARGET.tmp
	echo "#####@ORIGINAL-FILE '$module'" >> $TARGET.tmp
	cat $module >> $TARGET.tmp
done

# Actual code.
echo "#############################################" >> $TARGET.tmp
echo "#####@ORIGINAL-FILE 'main'" >> $TARGET.tmp
cat main >> $TARGET.tmp

# Remove MERGE_DELs
sed -i '/#####@MERGE_DEL 1/,/#####@MERGE_DEL 0/d' $TARGET.tmp

echo "#############################################" >> $TARGET.tmp

cp $TARGET.tmp $TARGET.raw
sed -i 's|#####@INSERT_TYPE|type="raw"|g' $TARGET.raw

# Remove leading and trailing WS.
sed -i "s/^[[:space:]]*//" $TARGET.tmp
sed -i "s/[[:space:]]*$//" $TARGET.tmp

# Remove lines consisting of a comment.
sed -i "/^[[:space:]]*#[[:space:]].*/d" $TARGET.tmp

# Remove lines consisting of WS.
sed -i "/^[[:space:]]*$/d" $TARGET.tmp

# Replace all instances of "echo" and "echo -e" with 'o'.

# More miscellaneous stripdowns.
echo 'B="\b\b\b\b\b\b\b\b\b\b"' > $TARGET.fun
sed -i 's/\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b/$B/g' $TARGET.tmp

# We just nuked the shebang, so fix that.
echo "#!/bin/bash"|cat - $TARGET.fun $TARGET.tmp >> $TARGET && cp $TARGET $TARGET.tmp

# Remove tmp.
rm $TARGET.fun

sed -i 's|#####@INSERT_TYPE|type="shxz"|g' $TARGET

xz -9 $TARGET
echo "#!/bin/bash" > $TARGET.shxz
echo 'eval "$(cat "$0" | tail -n+4 | xz -d)"' >> $TARGET.shxz
echo 'exit 0' >> $TARGET.shxz
cat $TARGET.xz >> $TARGET.shxz

cp $TARGET.tmp $TARGET
sed -i 's|#####@INSERT_TYPE|type="shbz2"|g' $TARGET

bzip2 -9 $TARGET
echo "#!/bin/bash" > $TARGET.shbz2
echo 'eval "$(cat "$0" | tail -n+4 | bzip2 -d)"' >> $TARGET.shbz2
echo 'exit 0' >> $TARGET.shbz2
cat $TARGET.bz2 >> $TARGET.shbz2

cp $TARGET.tmp $TARGET
sed -i 's|#####@INSERT_TYPE|type="shgz"|g' $TARGET

gzip -9 $TARGET
echo "#!/bin/bash" > $TARGET.shgz
echo 'eval "$(cat "$0" | tail -n+4 | gzip -d)"' >> $TARGET.shgz
echo 'exit 0' >> $TARGET.shgz
cat $TARGET.gz >> $TARGET.shgz

rm $TARGET{.gz,.xz,.bz2,.tmp}

chmod +x $TARGET.*

for f in $TARGET.*; do
	cat "$f" | sha256sum - > $f.sha256sum
done
